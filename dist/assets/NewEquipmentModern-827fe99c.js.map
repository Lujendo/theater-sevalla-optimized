{"version":3,"file":"NewEquipmentModern-827fe99c.js","sources":["../../src/components/NewEquipmentModern.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';\nimport { createEquipment } from '../services/equipmentService';\nimport { getEquipmentTypes } from '../services/equipmentTypeService';\nimport { getLocations } from '../services/locationService';\nimport { getCategories } from '../services/categoryService';\nimport { useAuth } from '../context/AuthContext';\nimport EquipmentForm from './EquipmentForm';\nimport { Card, Button } from './ui';\nimport axios from 'axios';\n\nconst NewEquipmentModern = () => {\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  const [formData, setFormData] = useState({\n    type_id: '',\n    category_id: '',\n    category: '',\n    brand: '',\n    model: '',\n    serial_number: '',\n    status: 'available',\n    location: '',\n    location_id: '',\n    description: '',\n    reference_image_id: '',\n    quantity: 1, // Default quantity is 1\n    // Installation fields\n    installation_type: 'portable',\n    installation_location: '',\n    installation_location_id: '',\n    installation_quantity: 0,\n    installation_date: '',\n    installation_notes: '',\n    maintenance_schedule: '',\n    last_maintenance_date: '',\n    next_maintenance_date: ''\n  });\n\n  const [files, setFiles] = useState([]);\n  const [error, setError] = useState('');\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [showAllocationOptions, setShowAllocationOptions] = useState(false);\n  const [allocationData, setAllocationData] = useState({\n    allocationType: 'storage', // 'storage', 'show', 'location', 'installation'\n    showId: '',\n    locationId: '',\n    quantity: 1,\n    // Installation-specific fields\n    installationType: 'portable',\n    installationLocationId: '',\n    installationLocation: '',\n    installationDate: '',\n    installationNotes: '',\n    maintenanceSchedule: ''\n  });\n\n  // Fetch equipment types for dropdown\n  const { data: typesData } = useQuery({\n    queryKey: ['equipment-types'],\n    queryFn: getEquipmentTypes,\n    staleTime: 300000, // 5 minutes\n  });\n\n  // Fetch categories for dropdown\n  const { data: categoriesData } = useQuery({\n    queryKey: ['categories'],\n    queryFn: getCategories,\n    staleTime: 300000, // 5 minutes\n  });\n\n  // Fetch locations for dropdown\n  const { data: locationsData } = useQuery({\n    queryKey: ['locations'],\n    queryFn: getLocations,\n    staleTime: 300000, // 5 minutes\n  });\n\n  // Fetch default storage locations\n  const { data: defaultStorageData } = useQuery({\n    queryKey: ['default-storage-locations'],\n    queryFn: async () => {\n      const response = await axios.get('/api/default-storage-locations');\n      return response.data;\n    },\n    staleTime: 300000, // 5 minutes\n  });\n\n  // Fetch shows for allocation dropdown\n  const { data: showsData } = useQuery({\n    queryKey: ['shows'],\n    queryFn: async () => {\n      const response = await axios.get('/api/shows');\n      return response.data;\n    },\n    staleTime: 300000, // 5 minutes\n    enabled: showAllocationOptions && allocationData.allocationType === 'show'\n  });\n\n  // Equipment status options for dropdown\n  const statusOptions = ['available', 'in-use', 'maintenance', 'unavailable', 'broken'];\n\n  // Set default storage location automatically when default storage data is loaded\n  useEffect(() => {\n    if (defaultStorageData?.defaultStorageLocations?.length > 0 && !formData.location_id) {\n      const defaultStorage = defaultStorageData.defaultStorageLocations[0]; // First one has highest priority\n      console.log('🏪 Setting default storage location:', defaultStorage);\n\n      setFormData(prev => ({\n        ...prev,\n        location_id: defaultStorage.location_id.toString(),\n        location: defaultStorage.location?.name || defaultStorage.name || 'Default Storage',\n        status: 'available' // Default to available for storage location\n      }));\n    }\n  }, [defaultStorageData, formData.location_id]);\n\n  // Also set default location when locations data is loaded (fallback)\n  useEffect(() => {\n    if (locationsData?.locations?.length > 0 && !formData.location_id && !defaultStorageData?.defaultStorageLocations?.length) {\n      // Find a location that might be a default storage (look for keywords)\n      const defaultLocation = locationsData.locations.find(location =>\n        location.name?.toLowerCase().includes('storage') ||\n        location.name?.toLowerCase().includes('lager') ||\n        location.name?.toLowerCase().includes('warehouse') ||\n        location.name?.toLowerCase().includes('depot')\n      ) || locationsData.locations[0]; // Fallback to first location\n\n      console.log('🏪 Setting fallback default location:', defaultLocation);\n\n      setFormData(prev => ({\n        ...prev,\n        location_id: defaultLocation.id.toString(),\n        location: defaultLocation.name,\n        status: 'available'\n      }));\n    }\n  }, [locationsData, formData.location_id, defaultStorageData]);\n\n  // Override form location and quantity based on allocation choices\n  useEffect(() => {\n    if (!showAllocationOptions) return;\n\n    let shouldUpdateLocation = false;\n    let newLocationId = '';\n    let newLocation = '';\n    let newStatus = formData.status;\n\n    // Handle different allocation types\n    switch (allocationData.allocationType) {\n      case 'storage':\n        // Keep default storage location - no override needed\n        break;\n\n      case 'show':\n        // For show allocation, keep equipment in storage but mark as allocated\n        // Location stays as storage, but status changes to reflect allocation\n        if (allocationData.showId) {\n          newStatus = 'in-use'; // Equipment allocated to show\n          console.log('📺 Equipment allocated to show - status set to in-use');\n        }\n        break;\n\n      case 'location':\n        // Override location to the allocated location\n        if (allocationData.locationId) {\n          const selectedLocation = locationsData?.locations?.find(loc => loc.id.toString() === allocationData.locationId);\n          if (selectedLocation) {\n            shouldUpdateLocation = true;\n            newLocationId = allocationData.locationId;\n            newLocation = selectedLocation.name;\n            newStatus = 'in-use'; // Equipment at specific location\n            console.log('📍 Overriding location to allocated location:', selectedLocation.name);\n          }\n        }\n        break;\n\n      case 'installation':\n        // Override location to the installation location\n        if (allocationData.installationLocationId) {\n          const selectedLocation = locationsData?.locations?.find(loc => loc.id.toString() === allocationData.installationLocationId);\n          if (selectedLocation) {\n            shouldUpdateLocation = true;\n            newLocationId = allocationData.installationLocationId;\n            newLocation = selectedLocation.name;\n            newStatus = 'in-use'; // Installed equipment is in-use\n            console.log('🔧 Overriding location to installation location:', selectedLocation.name);\n          }\n        } else if (allocationData.installationLocation) {\n          shouldUpdateLocation = true;\n          newLocationId = '';\n          newLocation = allocationData.installationLocation;\n          newStatus = 'in-use'; // Installed equipment is in-use\n          console.log('🔧 Overriding location to custom installation location:', allocationData.installationLocation);\n        }\n        break;\n    }\n\n    // Handle quantity override for partial allocations\n    let shouldUpdateQuantity = false;\n    let newQuantity = formData.quantity;\n\n    // For location and installation allocations, if quantity is less than total,\n    // we need to consider if we should override the main quantity\n    if ((allocationData.allocationType === 'location' || allocationData.allocationType === 'installation') &&\n        allocationData.quantity > 0 && allocationData.quantity < (formData.quantity || 1)) {\n      // For partial allocations, keep the original quantity but note the allocation\n      // The backend will handle creating the allocation record\n      console.log(`📊 Partial allocation: ${allocationData.quantity} of ${formData.quantity} items`);\n    } else if ((allocationData.allocationType === 'location' || allocationData.allocationType === 'installation') &&\n               allocationData.quantity === (formData.quantity || 1)) {\n      // For full allocations, the location override is sufficient\n      console.log(`📊 Full allocation: all ${allocationData.quantity} items allocated`);\n    }\n\n    // Update form data if location should be overridden\n    if (shouldUpdateLocation || newStatus !== formData.status || shouldUpdateQuantity) {\n      setFormData(prev => ({\n        ...prev,\n        ...(shouldUpdateLocation && {\n          location_id: newLocationId,\n          location: newLocation\n        }),\n        ...(shouldUpdateQuantity && {\n          quantity: newQuantity\n        }),\n        status: newStatus\n      }));\n    }\n  }, [allocationData, locationsData, showAllocationOptions, formData.status, formData.quantity]);\n\n  // Create equipment mutation\n  const createMutation = useMutation({\n    mutationFn: async (data) => {\n      // We don't need to create a FormData object here\n      // The createEquipment service function will handle that\n      return createEquipment(data.equipment, data.files);\n    },\n    onSuccess: (data) => {\n      // Invalidate and refetch equipment queries\n      queryClient.invalidateQueries({ queryKey: ['equipment'] });\n      queryClient.invalidateQueries({ queryKey: ['equipment-list'] });\n      queryClient.invalidateQueries({ queryKey: ['equipment-summary'] });\n\n      setIsSuccess(true);\n      setError('');\n\n      // Navigate to the new equipment details page after a short delay\n      setTimeout(() => {\n        if (data?.equipment?.id) {\n          navigate(`/equipment/${data.equipment.id}`);\n        } else {\n          navigate('/equipment');\n        }\n      }, 1500);\n    },\n    onError: (error) => {\n      console.error('Error creating equipment:', error);\n      setError(error.response?.data?.message || 'Failed to create equipment');\n    },\n  });\n\n  // Handle form input changes\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n\n    // Create a copy of the current form data\n    let updatedFormData = { ...formData, [name]: value };\n\n    // Special handling for category_id\n    if (name === 'category_id' && value && categoriesData?.categories) {\n      // Find the category name from the selected category_id\n      const selectedCategory = categoriesData.categories.find(cat => cat.id.toString() === value);\n\n      if (selectedCategory) {\n        console.log('Selected category:', selectedCategory);\n\n        // Update both category_id and category name\n        updatedFormData = {\n          ...updatedFormData,\n          category_id: value,\n          category: selectedCategory.name // Set the category name\n        };\n      }\n    }\n    // Special handling for location_id\n    else if (name === 'location_id' && value) {\n      // Find the location name from the selected location_id\n      const selectedLocation = locationsData?.locations.find(loc => loc.id.toString() === value);\n\n      if (selectedLocation) {\n        console.log('🏪 Selected location:', selectedLocation);\n\n        // Update both location_id and location name\n        updatedFormData = {\n          ...updatedFormData,\n          location_id: value,\n          location: selectedLocation.name // Set the location name\n        };\n\n        // Check if the location is a storage location (case insensitive)\n        const isStorageLocation = selectedLocation.name.toLowerCase().includes('lager') ||\n                                selectedLocation.name.toLowerCase().includes('storage') ||\n                                selectedLocation.name.toLowerCase().includes('warehouse') ||\n                                selectedLocation.name.toLowerCase().includes('depot');\n\n        // Update status based on location and installation type\n        if (formData.installation_type === 'fixed' || formData.installation_type === 'semi-permanent') {\n          // If equipment is installed, always set status to \"in-use\"\n          updatedFormData.status = 'in-use';\n          console.log('🔧 Setting status to \"in-use\" because equipment is installed');\n        } else if (isStorageLocation) {\n          // If location is a storage location and equipment is portable, set status to \"available\"\n          updatedFormData.status = 'available';\n          console.log('📦 Setting status to \"available\" because location is storage');\n        } else if (updatedFormData.status === 'available') {\n          // If location is not storage and status is \"available\", set status to \"in-use\"\n          updatedFormData.status = 'in-use';\n          console.log(`🎯 Setting status to \"in-use\" because location is not storage (${selectedLocation.name})`);\n        }\n      }\n    }\n    // Special handling for location field - custom location entry\n    else if (name === 'location' && value) {\n      updatedFormData = {\n        ...updatedFormData,\n        location: value,\n        // Clear location_id when custom location is entered\n        location_id: ''\n      };\n\n      // Check if the custom location is a storage location (case insensitive)\n      const isStorageLocation = value.toLowerCase().includes('lager') ||\n                              value.toLowerCase().includes('storage') ||\n                              value.toLowerCase().includes('warehouse') ||\n                              value.toLowerCase().includes('depot');\n\n      // Update status based on location and installation type\n      if (formData.installation_type === 'fixed' || formData.installation_type === 'semi-permanent') {\n        // If equipment is installed, always set status to \"in-use\"\n        updatedFormData.status = 'in-use';\n        console.log('🔧 Setting status to \"in-use\" because equipment is installed');\n      } else if (isStorageLocation) {\n        // If location is a storage location and equipment is portable, set status to \"available\"\n        updatedFormData.status = 'available';\n        console.log('📦 Setting status to \"available\" because custom location is storage');\n      } else if (updatedFormData.status === 'available') {\n        // If location is not storage and status is \"available\", set status to \"in-use\"\n        updatedFormData.status = 'in-use';\n        console.log(`🎯 Setting status to \"in-use\" because custom location is not storage (${value})`);\n      }\n    }\n    // Special handling for installation_location_id\n    else if (name === 'installation_location_id' && value) {\n      // Find the installation location name from the selected installation_location_id\n      const selectedInstallationLocation = locationsData?.locations.find(loc => loc.id.toString() === value);\n\n      if (selectedInstallationLocation) {\n        console.log('Selected installation location:', selectedInstallationLocation);\n\n        // Update both installation_location_id and installation_location name\n        updatedFormData = {\n          ...updatedFormData,\n          installation_location_id: value,\n          installation_location: selectedInstallationLocation.name // Set the installation location name\n        };\n      }\n    }\n    // Special handling for installation_location field - custom installation location entry\n    else if (name === 'installation_location' && value) {\n      updatedFormData = {\n        ...updatedFormData,\n        installation_location: value,\n        // Clear installation_location_id when custom installation location is entered\n        installation_location_id: ''\n      };\n    }\n    // Special handling for installation_type\n    else if (name === 'installation_type') {\n      updatedFormData = {\n        ...updatedFormData,\n        installation_type: value\n      };\n\n      // CONDITIONAL RULE: If installation type is fixed or semi-permanent, set status to \"in-use\"\n      if (value === 'fixed' || value === 'semi-permanent') {\n        updatedFormData.status = 'in-use';\n        console.log(`Setting status to \"in-use\" because installation type is ${value}`);\n      } else if (value === 'portable') {\n        // If changing back to portable, reset status based on location\n        const locationName = formData.location || '';\n        const isLager = locationName.toLowerCase() === 'lager';\n        updatedFormData.status = isLager ? 'available' : 'in-use';\n        console.log(`Setting status to \"${updatedFormData.status}\" because installation type is portable`);\n      }\n    }\n    // Special handling for quantity field\n    else if (name === 'quantity') {\n      const quantityValue = parseInt(value) || 1;\n      // Ensure minimum quantity is 1\n      updatedFormData.quantity = Math.max(1, quantityValue);\n      console.log(`Setting quantity to: ${updatedFormData.quantity}`);\n    }\n    // Special handling for installation_quantity field\n    else if (name === 'installation_quantity') {\n      const installationQuantityValue = parseInt(value) || 0;\n      // Ensure minimum installation quantity is 0\n      updatedFormData.installation_quantity = Math.max(0, installationQuantityValue);\n      console.log(`Setting installation quantity to: ${updatedFormData.installation_quantity}`);\n    }\n    // Special handling for status field\n    else if (name === 'status') {\n      // If user manually changes status, respect their choice\n      console.log(`User manually changed status to: ${value}`);\n\n      // But if location is \"Lager\", force status to \"available\"\n      const locationName = formData.location || '';\n      const isLager = locationName.toLowerCase() === 'lager';\n\n      // But if installation type is fixed/semi-permanent, force status to \"in-use\"\n      if ((formData.installation_type === 'fixed' || formData.installation_type === 'semi-permanent') && value !== 'in-use') {\n        console.log('Forcing status back to \"in-use\" because installation type is fixed/semi-permanent');\n        updatedFormData.status = 'in-use';\n      } else if (isLager && value !== 'available') {\n        console.log('Forcing status back to \"available\" because location is Lager');\n        updatedFormData.status = 'available';\n      }\n    }\n\n    // Update the form data\n    setFormData(updatedFormData);\n  };\n\n  // Handle file selection\n  const handleFileChange = (selectedFiles) => {\n    setFiles(selectedFiles);\n  };\n\n  // Handle setting reference image\n  const handleSetReferenceImage = (fileId) => {\n    // For new equipment, we need to handle temporary file IDs\n    // We'll use a special format like \"temp-{index}\" to identify the file\n    setFormData({\n      ...formData,\n      reference_image_id: fileId.toString(),\n    });\n  };\n\n  // Handle file deletion for new equipment\n  const handleFileDelete = (fileIndex) => {\n    // For new equipment, we're just removing from the files array\n    const newFiles = [...files];\n\n    // If the deleted file was the reference image, clear the reference_image_id\n    if (formData.reference_image_id === fileIndex.toString()) {\n      setFormData({\n        ...formData,\n        reference_image_id: '',\n      });\n    }\n\n    // Remove the file from the array\n    newFiles.splice(fileIndex, 1);\n    setFiles(newFiles);\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    if (e) e.preventDefault();\n\n    // Validate required fields\n    if (!formData.type_id || !formData.brand || !formData.model) {\n      setError('Type, brand, and model are required');\n      return;\n    }\n\n    // Validate allocation options if allocating\n    if (showAllocationOptions && allocationData.allocationType !== 'storage') {\n      if (allocationData.allocationType === 'show' && !allocationData.showId) {\n        setError('Please select a show for allocation');\n        return;\n      }\n      if (allocationData.allocationType === 'location' && !allocationData.locationId) {\n        setError('Please select a location for allocation');\n        return;\n      }\n      if (allocationData.allocationType === 'installation' && !allocationData.installationLocationId && !allocationData.installationLocation) {\n        setError('Please select or enter an installation location');\n        return;\n      }\n      if (allocationData.quantity > (formData.quantity || 1)) {\n        setError('Allocation quantity cannot exceed total equipment quantity');\n        return;\n      }\n    }\n\n    // Check if there's a reference image file\n    const referenceImageFile = formData.reference_image_id === 'new' && files.length > 0\n      ? files.find((_, index) => index === 0) // Just use the first file as reference image for simplicity\n      : null;\n\n    // Remove the reference image from files if it exists\n    const regularFiles = referenceImageFile\n      ? files.filter(file => file !== referenceImageFile)\n      : files;\n\n    // Prepare equipment data with allocation overrides\n    const equipmentData = { ...formData };\n\n    // Override form values with allocation values when allocation is not default storage\n    if (showAllocationOptions && allocationData.allocationType !== 'storage') {\n      console.log('🔄 ALLOCATION OVERRIDE: Form values will be overridden by allocation settings');\n      console.log('📋 Original form data:', {\n        location: formData.location,\n        location_id: formData.location_id,\n        status: formData.status,\n        quantity: formData.quantity\n      });\n\n      switch (allocationData.allocationType) {\n        case 'show':\n          // For show allocation, equipment stays in storage but is marked as allocated\n          // No location override, but status is set to in-use\n          equipmentData.status = 'in-use';\n          console.log('📺 Show allocation: status set to in-use');\n          break;\n\n        case 'location':\n          // Override location with allocation location\n          if (allocationData.locationId) {\n            const selectedLocation = locationsData?.locations?.find(loc => loc.id.toString() === allocationData.locationId);\n            if (selectedLocation) {\n              equipmentData.location_id = allocationData.locationId;\n              equipmentData.location = selectedLocation.name;\n              equipmentData.status = 'in-use';\n              console.log('📍 Location allocation override:', selectedLocation.name);\n            }\n          }\n          break;\n\n        case 'installation':\n          // Override location with installation location\n          if (allocationData.installationLocationId) {\n            const selectedLocation = locationsData?.locations?.find(loc => loc.id.toString() === allocationData.installationLocationId);\n            if (selectedLocation) {\n              equipmentData.location_id = allocationData.installationLocationId;\n              equipmentData.location = selectedLocation.name;\n              equipmentData.status = 'in-use';\n              console.log('🔧 Installation location override:', selectedLocation.name);\n            }\n          } else if (allocationData.installationLocation) {\n            equipmentData.location_id = '';\n            equipmentData.location = allocationData.installationLocation;\n            equipmentData.status = 'in-use';\n            console.log('🔧 Custom installation location override:', allocationData.installationLocation);\n          }\n\n          // Add installation-specific fields\n          equipmentData.installation_type = allocationData.installationType;\n          equipmentData.installation_location = allocationData.installationLocation || '';\n          equipmentData.installation_location_id = allocationData.installationLocationId || '';\n          equipmentData.installation_quantity = allocationData.quantity || 0;\n          equipmentData.installation_date = allocationData.installationDate || '';\n          equipmentData.installation_notes = allocationData.installationNotes || '';\n          equipmentData.maintenance_schedule = allocationData.maintenanceSchedule || '';\n          break;\n      }\n\n      console.log('✅ FINAL DATABASE VALUES:', {\n        location: equipmentData.location,\n        location_id: equipmentData.location_id,\n        status: equipmentData.status,\n        quantity: equipmentData.quantity,\n        allocation_type: allocationData.allocationType\n      });\n    }\n\n    createMutation.mutate({\n      equipment: {\n        ...equipmentData,\n        // If reference_image_id is 'new', it will be handled by the backend\n        reference_image_id: formData.reference_image_id === 'new' ? 'new' : formData.reference_image_id,\n      },\n      files: regularFiles,\n      referenceImageFile: referenceImageFile,\n      allocation: showAllocationOptions ? allocationData : null,\n    });\n  };\n\n  // Cancel creation\n  const handleCancel = () => {\n    navigate('/equipment');\n  };\n\n  // Get allocation summary text for form display\n  const getAllocationSummaryText = () => {\n    if (!showAllocationOptions || allocationData.allocationType === 'storage') {\n      return null;\n    }\n\n    switch (allocationData.allocationType) {\n      case 'show':\n        const showName = allocationData.showId && showsData?.shows?.find(s => s.id.toString() === allocationData.showId)?.name;\n        return showName ? `Allocated to show \"${showName}\"` : 'Allocated to show';\n\n      case 'location':\n        const locationName = allocationData.locationId && locationsData?.locations?.find(l => l.id.toString() === allocationData.locationId)?.name;\n        return locationName ? `Allocated to ${locationName}` : 'Allocated to location';\n\n      case 'installation':\n        const installLocationName = allocationData.installationLocationId && locationsData?.locations?.find(l => l.id.toString() === allocationData.installationLocationId)?.name;\n        const customLocation = allocationData.installationLocation;\n        const location = installLocationName || customLocation || 'installation location';\n        return `Installed at ${location} (${allocationData.installationType})`;\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Compact Header Section */}\n      <div className=\"bg-white rounded-lg shadow-sm border border-slate-200 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            {/* Breadcrumbs */}\n            <nav className=\"flex items-center space-x-2 text-sm text-slate-600 mb-1\">\n              <Link to=\"/equipment\" className=\"hover:text-slate-800 transition-colors\">\n                Equipment\n              </Link>\n              <svg className=\"w-3 h-3\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n              </svg>\n              <span className=\"text-slate-800 font-medium\">Add New Equipment</span>\n            </nav>\n\n            {/* Title */}\n            <h1 className=\"text-xl font-bold text-slate-800\">Add New Equipment</h1>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowAllocationOptions(!showAllocationOptions)}\n              className=\"flex items-center\"\n            >\n              <svg className=\"w-3 h-3 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n              </svg>\n              {showAllocationOptions ? 'Hide' : 'Allocate'}\n            </Button>\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              onClick={handleSubmit}\n              disabled={createMutation.isLoading}\n              className=\"flex items-center min-w-[120px]\"\n            >\n              {createMutation.isLoading ? (\n                <div className=\"flex items-center\">\n                  <svg className=\"animate-spin -ml-1 mr-1 h-3 w-3\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Creating...\n                </div>\n              ) : (\n                <div className=\"flex items-center\">\n                  <svg className=\"w-3 h-3 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                  </svg>\n                  Create Equipment\n                </div>\n              )}\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={handleCancel}\n              disabled={createMutation.isLoading}\n              className=\"flex items-center\"\n            >\n              <svg className=\"w-4 h-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Allocation Options Panel */}\n      {showAllocationOptions && (\n        <div className=\"bg-white rounded-lg shadow-sm border border-slate-200 p-4\">\n          <h3 className=\"text-base font-semibold text-slate-800 mb-3\">Allocation Options</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Allocation Type */}\n            <div>\n              <label className=\"block text-sm font-medium text-slate-700 mb-2\">Allocation Type</label>\n              <div className=\"space-y-2\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"allocationType\"\n                    value=\"storage\"\n                    checked={allocationData.allocationType === 'storage'}\n                    onChange={(e) => setAllocationData(prev => ({ ...prev, allocationType: e.target.value }))}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm\">Default Storage</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"allocationType\"\n                    value=\"show\"\n                    checked={allocationData.allocationType === 'show'}\n                    onChange={(e) => setAllocationData(prev => ({ ...prev, allocationType: e.target.value }))}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm\">Allocate to Show</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"allocationType\"\n                    value=\"location\"\n                    checked={allocationData.allocationType === 'location'}\n                    onChange={(e) => setAllocationData(prev => ({ ...prev, allocationType: e.target.value }))}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm\">Allocate to Location</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"allocationType\"\n                    value=\"installation\"\n                    checked={allocationData.allocationType === 'installation'}\n                    onChange={(e) => setAllocationData(prev => ({ ...prev, allocationType: e.target.value }))}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm\">Install Equipment</span>\n                </label>\n              </div>\n            </div>\n\n            {/* Show Selection (if allocating to show) */}\n            {allocationData.allocationType === 'show' && (\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Select Show</label>\n                <select\n                  value={allocationData.showId}\n                  onChange={(e) => setAllocationData(prev => ({ ...prev, showId: e.target.value }))}\n                  className=\"w-full rounded-md border-slate-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm\"\n                >\n                  <option value=\"\">Select a show...</option>\n                  {showsData?.shows?.map((show) => (\n                    <option key={show.id} value={show.id}>\n                      {show.name}\n                      {show.venue && ` - ${show.venue}`}\n                      {show.start_date && ` (${new Date(show.start_date).toLocaleDateString()})`}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            )}\n\n            {/* Location Selection (if allocating to location) */}\n            {allocationData.allocationType === 'location' && (\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Select Location</label>\n                <select\n                  value={allocationData.locationId}\n                  onChange={(e) => setAllocationData(prev => ({ ...prev, locationId: e.target.value }))}\n                  className=\"w-full rounded-md border-slate-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm\"\n                >\n                  <option value=\"\">Select a location...</option>\n                  {locationsData?.locations?.map((location) => (\n                    <option key={location.id} value={location.id}>\n                      {location.name}\n                      {location.city && ` (${location.city})`}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            )}\n\n            {/* Installation Type (if installing equipment) */}\n            {allocationData.allocationType === 'installation' && (\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Installation Type</label>\n                <select\n                  value={allocationData.installationType}\n                  onChange={(e) => setAllocationData(prev => ({ ...prev, installationType: e.target.value }))}\n                  className=\"w-full rounded-md border-slate-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm\"\n                >\n                  <option value=\"portable\">Portable (can be moved freely)</option>\n                  <option value=\"semi-permanent\">Semi-permanent (can be moved with approval)</option>\n                  <option value=\"fixed\">Fixed (permanently installed)</option>\n                </select>\n              </div>\n            )}\n\n            {/* Installation Location (if installing equipment) */}\n            {allocationData.allocationType === 'installation' && (\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Installation Location</label>\n                <select\n                  value={allocationData.installationLocationId}\n                  onChange={(e) => setAllocationData(prev => ({ ...prev, installationLocationId: e.target.value }))}\n                  className=\"w-full rounded-md border-slate-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm\"\n                >\n                  <option value=\"\">Select installation location...</option>\n                  {locationsData?.locations?.map((location) => (\n                    <option key={location.id} value={location.id}>\n                      {location.name}\n                      {location.city && ` (${location.city})`}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            )}\n\n            {/* Quantity (if allocating) */}\n            {allocationData.allocationType !== 'storage' && (\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                  {allocationData.allocationType === 'installation' ? 'Installation Quantity' : 'Allocation Quantity'}\n                </label>\n                <input\n                  type=\"number\"\n                  min={allocationData.allocationType === 'installation' ? \"0\" : \"1\"}\n                  max={formData.quantity || 1}\n                  value={allocationData.quantity}\n                  onChange={(e) => setAllocationData(prev => ({ ...prev, quantity: parseInt(e.target.value) || (allocationData.allocationType === 'installation' ? 0 : 1) }))}\n                  className=\"w-full rounded-md border-slate-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm\"\n                />\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  {allocationData.allocationType === 'installation'\n                    ? `Items to install (0-${formData.quantity || 1})`\n                    : `Max: ${formData.quantity || 1} (total equipment quantity)`\n                  }\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Additional Installation Fields */}\n          {allocationData.allocationType === 'installation' && (\n            <div className=\"mt-4 p-4 bg-gradient-to-r from-orange-50 to-amber-50 border border-orange-200 rounded-lg\">\n              <h4 className=\"text-sm font-semibold text-slate-800 mb-3 flex items-center\">\n                <div className=\"p-1 bg-orange-100 rounded mr-2\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3 text-orange-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\n                  </svg>\n                </div>\n                Installation Details\n              </h4>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                {/* Installation Date */}\n                <div>\n                  <label className=\"block text-xs font-medium text-slate-700 mb-1\">Installation Date</label>\n                  <input\n                    type=\"date\"\n                    value={allocationData.installationDate}\n                    onChange={(e) => setAllocationData(prev => ({ ...prev, installationDate: e.target.value }))}\n                    className=\"w-full rounded-md border-slate-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm\"\n                  />\n                </div>\n\n                {/* Maintenance Schedule */}\n                <div>\n                  <label className=\"block text-xs font-medium text-slate-700 mb-1\">Maintenance Schedule</label>\n                  <select\n                    value={allocationData.maintenanceSchedule}\n                    onChange={(e) => setAllocationData(prev => ({ ...prev, maintenanceSchedule: e.target.value }))}\n                    className=\"w-full rounded-md border-slate-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm\"\n                  >\n                    <option value=\"\">No schedule set</option>\n                    <option value=\"weekly\">Weekly</option>\n                    <option value=\"monthly\">Monthly</option>\n                    <option value=\"quarterly\">Quarterly</option>\n                    <option value=\"semi-annually\">Semi-annually</option>\n                    <option value=\"annually\">Annually</option>\n                  </select>\n                </div>\n\n                {/* Custom Installation Location */}\n                <div>\n                  <label className=\"block text-xs font-medium text-slate-700 mb-1\">Custom Location (if not in list)</label>\n                  <input\n                    type=\"text\"\n                    value={allocationData.installationLocation}\n                    onChange={(e) => setAllocationData(prev => ({ ...prev, installationLocation: e.target.value }))}\n                    placeholder=\"Enter custom installation location\"\n                    className=\"w-full rounded-md border-slate-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm\"\n                  />\n                </div>\n              </div>\n\n              {/* Installation Notes */}\n              <div className=\"mt-3\">\n                <label className=\"block text-xs font-medium text-slate-700 mb-1\">Installation Notes</label>\n                <textarea\n                  value={allocationData.installationNotes}\n                  onChange={(e) => setAllocationData(prev => ({ ...prev, installationNotes: e.target.value }))}\n                  rows=\"2\"\n                  placeholder=\"Enter installation notes, special requirements, or instructions\"\n                  className=\"w-full rounded-md border-slate-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm\"\n                ></textarea>\n              </div>\n            </div>\n          )}\n\n          {/* Allocation Summary */}\n          <div className=\"mt-3 p-3 bg-slate-50 rounded-lg\">\n            <p className=\"text-sm text-slate-600\">\n              {allocationData.allocationType === 'storage' && (\n                <span>Equipment will be stored in default storage location</span>\n              )}\n              {allocationData.allocationType === 'show' && (\n                <span>\n                  {allocationData.quantity} item(s) will be allocated to show\n                  {allocationData.showId && showsData?.shows?.find(s => s.id.toString() === allocationData.showId)?.name &&\n                    ` \"${showsData.shows.find(s => s.id.toString() === allocationData.showId).name}\"`}\n                </span>\n              )}\n              {allocationData.allocationType === 'location' && (\n                <span>\n                  {allocationData.quantity} item(s) will be allocated to location\n                  {allocationData.locationId && locationsData?.locations?.find(l => l.id.toString() === allocationData.locationId)?.name &&\n                    ` (${locationsData.locations.find(l => l.id.toString() === allocationData.locationId).name})`}\n                </span>\n              )}\n              {allocationData.allocationType === 'installation' && (\n                <span>\n                  {allocationData.quantity} item(s) will be installed as {allocationData.installationType}\n                  {allocationData.installationLocationId && locationsData?.locations?.find(l => l.id.toString() === allocationData.installationLocationId)?.name &&\n                    ` at ${locationsData.locations.find(l => l.id.toString() === allocationData.installationLocationId).name}`}\n                  {allocationData.installationLocation && !allocationData.installationLocationId &&\n                    ` at ${allocationData.installationLocation}`}\n                  {allocationData.installationDate && ` on ${new Date(allocationData.installationDate).toLocaleDateString()}`}\n                </span>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Compact Error/Success Display */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n          <div className=\"flex items-center\">\n            <svg className=\"w-4 h-4 text-red-400 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <span className=\"text-sm text-red-700 flex-1\">{error}</span>\n            <button\n              onClick={() => setError('')}\n              className=\"text-red-400 hover:text-red-600 ml-2\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      )}\n\n      {isSuccess && (\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n          <div className=\"flex items-center\">\n            <svg className=\"w-4 h-4 text-green-400 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <span className=\"text-sm text-green-700\">Equipment created successfully! Redirecting...</span>\n          </div>\n        </div>\n      )}\n\n      <EquipmentForm\n        formData={formData}\n        equipmentTypes={typesData?.types || []}\n        categoriesData={categoriesData?.categories || []}\n        statusOptions={statusOptions}\n        locationsData={locationsData}\n        handleInputChange={handleInputChange}\n        handleFileChange={handleFileChange}\n        handleSubmit={handleSubmit}\n        handleCancel={handleCancel}\n        isLoading={createMutation.isLoading}\n        error={error}\n        files={files}\n        uploadProgress={uploadProgress}\n        handleSetReferenceImage={handleSetReferenceImage}\n        handleFileDelete={handleFileDelete}\n        allocationOverride={{\n          isLocationOverridden: showAllocationOptions && allocationData.allocationType !== 'storage',\n          isStatusOverridden: showAllocationOptions && allocationData.allocationType !== 'storage',\n          isQuantityOverridden: showAllocationOptions && allocationData.allocationType !== 'storage',\n          allocationSummary: showAllocationOptions ? getAllocationSummaryText() : null\n        }}\n      />\n\n      {/* Compact Quick Actions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n        {/* Equipment Type Management */}\n        {user?.role === 'admin' && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-1.5 bg-blue-100 rounded-lg\">\n                <svg className=\"h-4 w-4 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                </svg>\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-sm font-medium text-slate-800\">Manage Types & Categories</h3>\n                <p className=\"text-xs text-slate-600\">Configure equipment types and locations</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => navigate('/settings')}\n                className=\"text-blue-700 border-blue-300 hover:bg-blue-100 text-xs px-2 py-1\"\n              >\n                Settings\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Quick Tips */}\n        <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-1.5 bg-slate-100 rounded-lg\">\n              <svg className=\"h-4 w-4 text-slate-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-sm font-medium text-slate-800\">Quick Tips</h3>\n              <p className=\"text-xs text-slate-600\">Use barcode scanner • Set installation type • Upload reference image</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NewEquipmentModern;\n"],"names":["NewEquipmentModern","navigate","useNavigate","queryClient","useQueryClient","user","useAuth","formData","setFormData","useState","files","setFiles","error","setError","uploadProgress","setUploadProgress","isSuccess","setIsSuccess","showAllocationOptions","setShowAllocationOptions","allocationData","setAllocationData","typesData","useQuery","getEquipmentTypes","categoriesData","getCategories","locationsData","getLocations","defaultStorageData","axios","showsData","statusOptions","useEffect","_a","defaultStorage","prev","_b","defaultLocation","location","_c","_d","shouldUpdateLocation","newLocationId","newLocation","newStatus","selectedLocation","loc","shouldUpdateQuantity","createMutation","useMutation","data","createEquipment","handleInputChange","e","name","value","updatedFormData","selectedCategory","cat","isStorageLocation","selectedInstallationLocation","isLager","quantityValue","installationQuantityValue","handleFileChange","selectedFiles","handleSetReferenceImage","fileId","handleFileDelete","fileIndex","newFiles","handleSubmit","referenceImageFile","_","index","regularFiles","file","equipmentData","handleCancel","getAllocationSummaryText","showName","s","locationName","l","installLocationName","_f","_e","customLocation","jsxs","jsx","Link","Button","show","_g","_i","_h","EquipmentForm"],"mappings":"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"}